// Produit par DIDJEIRA Dimanna Augustin && DJOUSSE William
#ifndef BCC
#define BCC
#include <stdio.h>
#define VRAI 1
#define FAUX 0

//Declaration du type bool√©en
typedef int BOOL;

//Declaration du type proposition qui est compos√© d'une valeur et d'un pointeur sur la proposition suivante
typedef struct prop
{
  char * valeur;
  struct prop *next;
} proposition;

// D√©claration d'un type regle qui est une liste de proposition
typedef proposition *regle;

//Declaration du type base de connaissance qui est compos√© d'une rgele et d'un pointeur sur la regle suivante
typedef struct con
{
  regle rule;
  struct con *next;
} base_connaissances;

//Declaration d'un pointeur BC qui est une liste de regle
typedef base_connaissances *BC;

//Declaration d'un type fait qui est compos√© d'une valeur et d'un √©l√©ment sur le fait suivant
typedef struct fact
{
  char * valeur;
  struct fact *next;
} fait;

//D√©claration du type BF qui est une liste de faits
typedef fait *BF;

//La fonction nouvP fait un malloc pour une proposition
regle nouvP (regle temp);

//La fonction nouvC fait un malloc d'un element de la base de connaissance
BC nouvC (BC temp);

//La fonction nouvF fait un malloc d'un element de la base de fait
BF nouvF (BF temp);

//La fonction ajouterPRO ajoute une proposition √† la pr√©misse d'une regle
regle ajouterPRO (regle R, char * pro);

// Lafonction ajouterCON ajoute une conclusion √† une r√®gle
regle ajouterCON (regle R, char * con);

//La fonction creerR cr√©e une r√®gle vide
regle creerR ();

//La fconftion cr√©erB cr√©e une base vide 
BC creerB ();

//Cette fonction teste si la premisse est vide, donc si la regle est vide
BOOL vide (regle R);

//cette fonction permet d'acc√©der √† la conclusion d'une r√®gle. On acc√®de √† une conlusion si la regle existe,si la conclusion existe et si elle √† une premisse.Pas de premisse, pas de conclusion.
char *conclusion (regle R);

//cette fonction permet d'acceder √† la t√™te d'une premisse
regle tete (regle R);

// Fonction permettant de renvoyer le reste d'une r√®gle pour les fonctions reccurssives
regle reste (regle R);

//Fonction permettant d'ajouter une r√®gle √† une base
BC ajouterR (BC base, regle R);

//cette fonction test de mani√®re recurssive si une proposition appartient √† la premisse d'une r√®gle
BOOL test (regle R, char * pro);

//Fonction qui teste si un fait appartient √† la base de faits
BOOL existe (BF faitss, char * pro);

//Cette fonction ajoute un fait √† la base de fait;
BF ajouterF (BF F, char * faits);

// Cette fonction compte nombre de proposition d'une r√®gle y compris la conclusion
int compterP (regle R);

//cette fonction supprime une proposition de la premisse d'une r√®gle
regle supprimer (regle R, char * pro);

//cette fonction permmet d'afficher un r√®gle.elle prend un bool√©en qui v√©rifie si la conclusion existe ou pas. selon qu'elle existe ou pas l'affichage diff√®re
void afficher (regle R, BOOL a);

//Cette fonction permet d'afficher les √©l√©ments de la base de connaissance
void afficherbase (BC base);

//Cette fonction permet d'afficher les √©l√©ments de la base de faits
void afficherfaits (BF faits);


//cette fonction compte le nombre de r√®gle dans la base de connaissances
int compterR (BC base);
//Cette fonction est le moetru d'inf√©rence.elle prend en param√®tre la base de connaissance et la base de faits.on consid√®re que la base n'est pas vide et que toutes les r√®gles poss√®dent une premisse et une conclusion. Elle retourne un base de faits ne contenant que les nouveaux faits.
BF MI (BC base, BF faits);

// Cette conftion permet de cr√©er une base de connaissance pr√©d√©finie
BC initialiserbase(BC base);

//Acc√der √† la r√®gle se trouvant en tete de la base
regle regle_tete(BC base);
char * valeur_prop_tete(regle R);
#endif
